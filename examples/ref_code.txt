
ref : https://medium.com/learning-rust/rust-basics-e73304ab35c7

// Variable bindings


let a = true;
let b: bool = true;

let (x, y) = (1, 2);

let mut z = 5;
z = 6;

//  Constant 
const N: i32 = 5;

//  static
static N: i32 = 5;


// Primitive Data types

//  bool : true or false
let x = true;
let y: bool = false;

// char : a single Unicode scalar value
let x = 'x';
let y = 'üòé';

// ‚≠êÔ∏è no "x", only single quotes
//because of Unicode support, char is not a single byte, but four.


//  Array :

let a = [1, 2, 3]; // a[0] = 1, a[1] = 2, a[2] = 3
let mut b = [1, 2, 3];

let c: [int; 3] = [1, 2, 3]; //[Type; NO of elements]

let d: ["my value"; 3]; //["my value", "my value", "my value"];

let e: [i32; 0] = []; //empty array

println!("{:?}", a); //[1, 2, 3]
println!("{:#?}", a);
//  [
//      1,
//      2,
//      3
//  ]

//  Tuple :
let a = (1, 1.5, true, 'a', "Hello, world!");
// a.0 = 1, a.1 = 1.5, a.2 = true, a.3 = 'a', a.4 = "Hello, world!"

let b: (i32, f64) = (1, 1.5);

let (c, d) = b; // c = 1, d = 1.5
let (e, _, _, _, f) = a; //e = 1, f = "Hello, world!", _ indicates not interested of that item

let g = (0,); //single-element tuple

let h = (b, (2, 4), 5); //((1, 1.5), (2, 4), 5)

println!("{:?}", a); //(1, 1.5, true, 'a', "Hello, world!")
println!("{:#?}", a);


// Operator :
// Arithmetic  Operator 
let a = 5;
let b = a + 1; //6
let c = a - 1; //4
let d = a * 2; //10
let e = a / 2; // ‚≠êÔ∏è 2 not 2.5
let f = a % 2; //1

let g = 5.0 / 2.0; //2.5

// Comparsion Operator : 
let a = 1;
let b = 2;

let c = a == b; //false
let d = a != b; //true
let e = a < b; //true
let f = a > b; //false
let g = a <= a; //true
let h = a >= a; //true

// üîé
let i = true > false; //true
let j = 'a' > 'A'; //true

// Logical Operators : ! && ||

let a = true;
let b = false;

let c = !a; //false
let d = a && b; //false
let e = a || b; //true

// On integer types, 
// ! inverts the individual bits in the two‚Äôs complement representation of the value

let a = !-2; //1
let b = !-1; //0
let c = !0; //-1
let d = !1; //-2

// Bitwise Operators : & | ^ << >>

let a = 1;
let b = 2;

let c = a & b; //0  (01 && 10 -> 00)
let d = a | b; //3  (01 || 10 -> 11)
let e = a ^ b; //3  (01 != 10 -> 11)
let f = a << b; //4  (add 2 positions to the end -> '01'+'00' -> 100)
let g = a >> a; //0  (remove 2 positions from the end -> oÃ∂1Ã∂ -> 0)

// Assignment and Compound Assignment Operators

let mut a = 2;

a += 5; //2 + 5 = 7
a -= 2; //7 - 2 = 5
a *= 5; //5 * 5 = 25
a /= 2; //25 / 2 = 12 not 12.5
a %= 5; //12 % 5 = 2

a &= 2; //10 && 10 -> 10 -> 2
a |= 5; //010 || 101 -> 111 -> 7
a ^= 2; //111 != 010 -> 101 -> 5
a <<= 1; //'101'+'0' -> 1010 -> 10
a >>= 2; //101Ã∂0Ã∂ -> 10 -> 2

// Type Casting Operator : as
let a = 15;
let b = (a as f64) / 2.0; //7.5